import path from 'path';
import { config } from 'dotenv';
config({ path: path.join(process.cwd(), '..', 'default.env') });
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import { logger } from './utils/logger';
import { AIOrchestrator } from './aiOrchestrator';
import { validateEnv } from './utils/environment';

const app = express();
const port = process.env.PORT || 3001;

// Initialize AI Orchestrator
const aiOrchestrator = new AIOrchestrator();

// Middleware
app.use(helmet());
app.use(cors());
app.use(compression());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Health check
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    service: 'ai-engine',
    version: process.env.npm_package_version || '1.0.0',
  });
});

// Process message endpoint
app.post('/process-message', async (req, res) => {
  try {
    const { message, agentConfig, context } = req.body;

    if (!message || !agentConfig) {
      return res.status(400).json({
        success: false,
        error: 'Missing required fields: message and agentConfig'
      });
    }

    logger.info('Processing message request', { 
      messageLength: message.length, 
      agentType: agentConfig.type 
    });

    const result = await aiOrchestrator.processMessage({
      message,
      agentConfig,
      context
    });

    res.json({
      success: true,
      ...result
    });
  } catch (error) {
    logger.error('Error processing message:', error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : 'Internal server error'
    });
  }
});

// Generate personalized message endpoint
app.post('/generate-message', async (req, res) => {
  try {
    const { context, agentConfig } = req.body;

    if (!context) {
      return res.status(400).json({
        success: false,
        error: 'Missing required field: context'
      });
    }

    logger.info('Generating personalized message', { 
      prospectName: context.prospect?.name,
      campaignTemplate: context.campaign?.template?.substring(0, 50) + '...'
    });

    // Construire le prompt pour la gÃ©nÃ©ration de message personnalisÃ©
    const systemPrompt = this.buildPersonalizedMessagePrompt(context);
    
    const messagePrompt = `GÃ©nÃ¨re un message personnalisÃ© pour ${context.prospect.name} en utilisant ces informations :

PROFIL DU PROSPECT :
- Nom : ${context.prospect.name}
- Poste : ${context.prospect.position || 'Non spÃ©cifiÃ©'}
- Entreprise : ${context.prospect.company || 'Non spÃ©cifiÃ©e'}
- Localisation : ${context.prospect.location || 'Non spÃ©cifiÃ©e'}
- Secteur : ${context.prospect.industry || 'Non spÃ©cifiÃ©'}
- Headline : ${context.prospect.headline || 'Non spÃ©cifiÃ©'}
- ExpÃ©riences rÃ©centes : ${context.prospect.experience?.map(exp => `${exp.title} chez ${exp.company}`).join(', ') || 'Non spÃ©cifiÃ©es'}
- CompÃ©tences : ${context.prospect.skills?.join(', ') || 'Non spÃ©cifiÃ©es'}

TEMPLATE DE CAMPAGNE :
${context.campaign.template}

AUDIENCE CIBLE :
${JSON.stringify(context.campaign.targetAudience, null, 2)}

PROFIL DE L'EXPÃ‰DITEUR :
- Profil : ${JSON.stringify(context.sender.profile, null, 2)}
- Business : ${JSON.stringify(context.sender.business, null, 2)}
- Style de communication : ${JSON.stringify(context.sender.communicationStyle, null, 2)}

Instructions :
1. Personnalise le message en utilisant les informations du prospect
2. Mentionne spÃ©cifiquement leur poste, entreprise ou expÃ©rience pertinente
3. Adapte le ton selon le style de communication configurÃ©
4. Garde le message concis (max 200 mots)
5. Inclus un appel Ã  l'action clair
6. Sois authentique et professionnel

GÃ©nÃ¨re uniquement le message final, sans explications supplÃ©mentaires.`;

    const result = await aiOrchestrator.processMessage({
      message: messagePrompt,
      agentConfig: {
        type: 'SALES',
        model: agentConfig?.model || 'gpt-4o',
        temperature: agentConfig?.temperature || 0.7,
        maxTokens: agentConfig?.maxTokens || 300,
        prompt: systemPrompt
      },
      context: {
        channelType: 'linkedin',
        metadata: {
          prospect: context.prospect,
          campaign: context.campaign,
          sender: context.sender
        }
      }
    });

    res.json({
      success: true,
      message: result.response
    });
  } catch (error) {
    logger.error('Error generating personalized message:', error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : 'Internal server error'
    });
  }
});

// Build personalized message prompt
function buildPersonalizedMessagePrompt(context: any): string {
  const { prospect, sender, aiParameters } = context;
  
  return `Tu es un expert en prospection LinkedIn spÃ©cialisÃ© dans la gÃ©nÃ©ration de messages personnalisÃ©s avec un taux d'ouverture optimal.

TON RÃ”LE :
- Analyser le profil LinkedIn du prospect pour identifier les points de connexion
- GÃ©nÃ©rer des messages personnalisÃ©s qui rÃ©sonnent avec leur expÃ©rience
- Optimiser pour un taux d'ouverture Ã©levÃ© en utilisant des techniques Ã©prouvÃ©es
- Adapter le ton selon le style de communication configurÃ©

TECHNIQUES D'OPTIMISATION DU TAUX D'OUVERTURE :
1. **Personnalisation authentique** : Mentionner spÃ©cifiquement leur poste, entreprise ou expÃ©rience
2. **Valeur immÃ©diate** : Proposer quelque chose de concret dÃ¨s le premier message
3. **CuriositÃ©** : CrÃ©er de l'intÃ©rÃªt sans tout rÃ©vÃ©ler
4. **Urgence sociale** : Mentionner des tendances ou opportunitÃ©s actuelles
5. **Preuve sociale** : RÃ©fÃ©rencer des succÃ¨s similaires (si pertinent)

STYLE DE COMMUNICATION CONFIGURÃ‰ :
${JSON.stringify(sender.communicationStyle, null, 2)}

PARAMÃˆTRES IA :
- TempÃ©rature : ${aiParameters?.temperature || 0.7}
- CrÃ©ativitÃ© : ${aiParameters?.creativity || 'modÃ©rÃ©e'}
- Longueur : ${aiParameters?.length || 'courte'}

RÃˆGLES STRICTES :
- Maximum 200 mots
- Toujours personnalisÃ© selon le profil
- Inclure un appel Ã  l'action clair
- ÃŠtre authentique et professionnel
- Ã‰viter les messages gÃ©nÃ©riques ou spammy`;
}

// Sentiment analysis endpoint
app.post('/analyze-sentiment', async (req, res) => {
  try {
    const { message } = req.body;

    if (!message) {
      return res.status(400).json({
        success: false,
        error: 'Missing required field: message'
      });
    }

    const result = await aiOrchestrator.analyzeSentiment(message);

    res.json({
      success: true,
      ...result
    });
  } catch (error) {
    logger.error('Error analyzing sentiment:', error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : 'Internal server error'
    });
  }
});

// Intent classification endpoint
app.post('/classify-intent', async (req, res) => {
  try {
    const { message } = req.body;

    if (!message) {
      return res.status(400).json({
        success: false,
        error: 'Missing required field: message'
      });
    }

    const result = await aiOrchestrator.classifyIntent(message);

    res.json({
      success: true,
      ...result
    });
  } catch (error) {
    logger.error('Error classifying intent:', error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : 'Internal server error'
    });
  }
});

// Error handling middleware
app.use((error: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  logger.error('Unhandled error:', error);
  res.status(500).json({
    success: false,
    error: 'Internal server error'
  });
});

// Start server
app.listen(port, () => {
  logger.info(`ðŸš€ AI Engine server running on port ${port}`);
  console.log(`ðŸ¤– AI Engine started on http://localhost:${port}`);
  console.log(`ðŸ“Š Health check: http://localhost:${port}/health`);
});

export default app; 